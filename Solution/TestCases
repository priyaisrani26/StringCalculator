package Solution;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

@DisplayName("Test Cases")
public class testClass {
	StringCalculator str_cal =new StringCalculator();
	
	@Test
	@DisplayName("When String is Empty")
	public void whenStringIsEmpty() {
		String str = "";
		int num = str_cal.Add(str);
		assertEquals(0, num);
	}
	
	@Test
	@DisplayName("When String has only one number")
	public void whenOnlyOneNumber() {
		String str = "2";
		int num = str_cal.Add(str);
		assertEquals(2, num);
	}
	
	@Test
	@DisplayName("When String has only two numbers")
	public void whenAdditionOfTwoNumbers() {
		String str = "1,2";
		int num = str_cal.Add(str);
		assertEquals(3, num);
	}
	
	@Test
	@DisplayName("When String has more than two numbers")
	public void whenAdditionOfMoreThanTwoNumbers() {
		String str = "1,2,3";
		int num = str_cal.Add(str);
		assertEquals(6, num);
	}
	
	@Test
	@DisplayName("When String has new line as delimiter instead of comma")
	public void whenNewLineInPlaceOfCommaIsUsed() {
		String str = "1\n2,3";
		int num = str_cal.Add(str);
		assertEquals(6, num);
	}
	
	@Test
	@DisplayName("When String should support custom delimiter instead of comma")
	public void whenItShouldSupportDifferentDelimiters() {
		String str = "//;\n1;2;3";
		int num = str_cal.Add(str);
		assertEquals(6, num);
	}
	
	@Test
	@DisplayName("When String should not contain negative numbers")
	public void whenNegativeNumbersNotAllowed() {
		String str = "-1,-2";
		assertThrows(IllegalArgumentException.class, () -> {
					str_cal.Add("-1,-2");
				});
	}
	
	@Test
	@DisplayName("When String has numbers greater than 1000, ignore them.")
	public void whenNoGreaterThan1000IsUsed() {
		String str = "1,1001";
		int sum = str_cal.Add(str);
 	   	assertEquals(1, sum);
	}
	
	@Test
	@DisplayName("When count method called to count how many times Add() method is being called")
	public void whenCountAddMethodIsCalled() {
		String str = "1,2";
		str_cal.Add(str);
 	   	int count = str_cal.GetCalledCount();
 	   	assertEquals(2, count);
	}
	
	@Test
	@DisplayName("When String has multiple delimiters")
	public void whenMultipleDelimiterOfSomeLengthIsUsed() {
		String str = "//**%%\n1**%%2**%%3";
		int sum = str_cal.Add(str);
 	   	assertEquals(6, sum);
	}
	
}

	
